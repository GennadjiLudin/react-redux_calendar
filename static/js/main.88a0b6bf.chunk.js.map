{"version":3,"sources":["helpers/helpers.js","components/WeekDays/WeekDay/WeekDay.jsx","components/WeekDays/WeekDays.jsx","actions/actionCreator.js","actions/actionHeader.js","components/DayTodo/DayTodo.jsx","components/Day/Day.jsx","components/Dates/Dates.jsx","containers/Calendar/Calendar.js","layers/Header/Header.jsx","components/Todo/Todo.jsx","components/TodoList/TodoList.jsx","components/FilterTodo/FilterTodo.jsx","containers/Todos/Todos.jsx","components/Form/Form.jsx","components/AddMode/AddMode.jsx","components/ReadOnlyTask/ReadOnlyTask.jsx","components/EditModeTask/EditModeTask.jsx","components/SelectedTask/SelectedTask.jsx","containers/Editbox/Editbox.jsx","components/Socials/Social/Social.jsx","components/Socials/Socials.jsx","components/Footer/Footer.jsx","containers/Sections/Section.jsx","components/Organizer/Organizer.jsx","App.js","serviceWorker.js","reducers/date.js","reducers/filters.js","reducers/tasks.js","reducers/rootReducer.js","store.js","index.js"],"names":["getRealDayOfWeek","jsDay","getFirstDayOfMonth","year","month","Date","getDay","getLastDayOfMonth","getNextMonth","getPrevMonth","setNumWithZero","num","WeekDay","weekDayName","variables","className","weekDaysName","WeekDays","map","index","key","changeIsAddModeAction","isAddMode","type","payload","changeMonth","changeYear","DayTodo","title","Day","props","date","id","onClickDateHandler","rightClassName","allDays","selectedDay","useEffect","onClick","tasks","task","i","connect","state","dispatch","selectDay","day","selectDayAction","datesArr","arrPrev","arrNext","currentDate","getDate","currentYear","getFullYear","currentMonth","getMonth","isCurrentDay","getDateId","onClickDateHandlerCurrent","onClickDateHandlerPrev","onClickDateHandlerNext","getAllDays","localStorage","getItem","JSON","parse","getAllDaysAction","useState","setDatesArr","setArrPrev","setArrNext","to","getLastDateOfMonth","firstElemsNum","jsFirstDay","getFirstElemsNum","lastElemsNum","jsLastDay","getLastElemsNum","LastDateOfPrevMonth","getLastDateOfPrevMonth","dates","arr","from","newArr","push","range","nexts","elem","addLastElemsNum","prevs","unshift","addFirstElemsNum","differenceArr","concat","length","newArrNext","splice","today","icon","faChevronLeft","faChevronRight","Todo","isCompleted","removeTask","completeTask","selectedTask","faCheck","faCircle","faTrashAlt","defaultProps","TodoList","filters","filteredTasks","setFilteredTasks","activeFilter","filter","filterTasks","taskList","uuid","tasksList","taskId","FILTERS_BTN","text","FilterTodo","changeFilter","activeCounter","setActiveCounter","completedCounter","setCompletedCounter","getCompletedCounter","counter","checkCounter","amount","changeFilterAction","sortTasks","droppableIndexStart","droppableIndexEnd","draggableId","sortTasksAction","changeIsAdd","dayTitle","faPlus","Form","changeMode","argument","description","setTitle","setDescription","handleClick","htmlFor","name","value","onChange","e","target","maxLength","required","cols","rows","faTimes","AddMode","addTask","addTitle","setAddTitle","addDescription","setAddDescription","trim","ReadOnlyTask","setEditMode","editMode","faPencilAlt","EditModeTask","changeTask","SelectedTask","changeTaskAction","addTaskAction","Social","socialImg","link","href","rel","src","alt","socials","Socials","social","Footer","Section","children","Organizer","hide","setHide","faArrowCircleRight","faArrowCircleLeft","App","Boolean","window","location","hostname","match","DATES","action","TASKS","newAllDaysObj","setLocalStorage","newAllDays","setItem","stringify","newDays","newSelectTasks","find","newAddTask","newAddTaskInSelectedDay","newSelectedDay","newStateTasks","newTask","newChangeTask","newSelectedDayTasks","newChangeTaskDay","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88a0b6bf.chunk.js","sourcesContent":["export const range = (arr, from, to) => {\n    let newArr = [...arr];\n    for (let i = from; i <= to; i++) {\n        newArr.push(i);\n    }\n    return newArr;\n}\n\nexport const addFirstElemsNum = (num, elem, arr) => {\n    let newArr = [...arr];\n    for (let i = 0; i < num; i++) {\n        newArr.unshift(elem);\n        elem--;\n    }\n    return newArr;\n}\n\nexport const addLastElemsNum = (num, elem, arr) => {\n    let newArr = [...arr];\n    for (let i = 0; i < num; i++) {\n        newArr.push(elem);\n        elem++;\n    }\n    return newArr;\n}\n\nexport const getLastDateOfMonth = (year, month) => {\n    let date = new Date(year, month + 1, 0);\n    return date.getDate();\n}\n\nexport const getFirstElemsNum = (year, month) => {\n    let jsFirstDay = getFirstDayOfMonth(year, month);\n    let realFirstDay = getRealDayOfWeek(jsFirstDay);\n    return realFirstDay - 1;\n}\n\nexport const getLastElemsNum = (year, month) => {\n    let jsLastDay = getLastDayOfMonth(year, month);\n    let realLastDay = getRealDayOfWeek(jsLastDay);\n    return 7 - realLastDay + 14;\n}\n\nexport const getRealDayOfWeek = (jsDay) => {\n    if (jsDay === 0) {\n        return 7;\n    } else {\n        return jsDay;\n    }\n}\n\nexport const getFirstDayOfMonth = (year, month) => {\n    let date = new Date(year, month, 1);\n    return date.getDay();\n}\n\nexport const getLastDayOfMonth = (year, month) => {\n    let date = new Date(year, month + 1, 0);\n    return date.getDay();\n}\n\nexport const getLastDateOfPrevMonth = (year, month) => {\n    let date = new Date(year, month, 0);\n    return date.getDate();\n}\n\nexport const getNextYear = (year, month) => {\n    if (month === 11) {\n        return year + 1;\n    } else {\n        return year;\n    }\n}\n\nexport const getNextMonth = (month) => {\n    if (month === 11) {\n        return 0;\n    } else {\n        return month + 1;\n    }\n}\n\nexport const getPrevYear = (year, month) => {\n    if (month === 0) {\n        return year - 1;\n    } else {\n        return year;\n    }\n}\n\nexport const getPrevMonth = (month) => {\n    if (month === 0) {\n        return 11;\n    } else {\n        return month - 1;\n    }\n}\n\nexport const getMonthName = (num) => {\n    let monthes = [\n        'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь',\n        'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'\n    ];\n    return monthes[num];\n}\n\nexport const setNumWithZero = (num) => {\n    if (num < 10) {\n        return num = '0' + num;\n    } else {\n        return num;\n    }\n}","import React from 'react';\n\nimport './WeekDay.scss';\n\nconst WeekDay = ({ weekDayName, variables = \"\" }) => {\n    return (\n        <div className={`week-day ${variables}`}>{weekDayName}</div>\n    )\n}\n\nexport default WeekDay;","import React from 'react';\n\nimport './WeekDays.scss';\n\nimport WeekDay from './WeekDay/WeekDay';\n\nconst weekDaysName = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'];\n\nconst WeekDays = () => {\n    return (\n        <div className=\"week-days\">\n            {weekDaysName.map((weekDayName, index) => (\n                <WeekDay variables={index >= 5 ? \"weekend\" : null} key={index} weekDayName={weekDayName} />\n            ))}\n        </div>\n    )\n}\n\nexport default WeekDays;","\nexport const ADD_TASK = 'ADD_TASK';\nexport const REMOVE_TASK = 'REMOVE_TASK';\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\nexport const CHANGE_FILTERS = 'CHANGE_FILTERS';\nexport const CHANGE_TASK = 'CHANGE_TASK';\nexport const DRAG_HAPPENED = 'DRAG_HAPPENED';\nexport const SELECT_DAY = 'SELECT_DAY';\nexport const SELECT_TASK = 'SELECT_TASK';\nexport const CHANGE_ADD_MODE = 'CHANGE_ADD_MODE';\nexport const GET_ALL_DAYS = 'GET_ALL_DAYS';\n\nexport const getAllDaysAction = () => {\n    let allDays = localStorage.getItem('allDays');\n    return dispatch => {\n        dispatch({\n            type: GET_ALL_DAYS,\n            payload: {\n                allDays: JSON.parse(allDays),\n            }\n        })\n    }\n}\n\nexport const addTaskAction = (taskId, title, description, isCompleted) => ({\n    type: ADD_TASK,\n    payload: {\n        taskId,\n        title,\n        description,\n        isCompleted,\n    }\n});\n\nexport const changeIsAddModeAction = (isAddMode) => ({\n    type: CHANGE_ADD_MODE,\n    payload: {\n        isAddMode,\n    }\n})\n\nexport const selectDayAction = (id, day, month, year) => ({\n    type: SELECT_DAY,\n    payload: {\n        id,\n        day,\n        month,\n        year,\n    }\n})\n\nexport const selectTaskAction = taskId => ({\n    type: SELECT_TASK,\n    payload: {\n        taskId,\n    }\n})\n\nexport const removeTaskAction = (taskId) => ({\n    type: REMOVE_TASK,\n    payload: {\n        taskId,\n    }\n})\n\nexport const completeTaskAction = (taskId) => ({\n    type: COMPLETE_TASK,\n    payload: {\n        taskId,\n    }\n})\n\nexport const changeFilterAction = activeFilter => ({\n    type: CHANGE_FILTERS,\n    payload: {\n        activeFilter,\n    }\n})\n\nexport const changeTaskAction = (taskId, title, description) => ({\n    type: CHANGE_TASK,\n    payload: {\n        taskId,\n        title,\n        description,\n    }\n})\n\nexport const sortTasksAction = (\n    droppableIndexStart,\n    droppableIndexEnd,\n    draggableId\n) => ({\n        type: DRAG_HAPPENED,\n        payload: {\n            droppableIndexStart,\n            droppableIndexEnd,\n            draggableId\n        }\n    })","export const CHANGE_MONTH = 'CHANGE_MONTH';\nexport const CHANGE_YEAR = 'CHANGE_YEAR';\nexport const TODAY = 'TODAY';\n\nexport const changeMonth = (type) => ({\n    type: CHANGE_MONTH,\n    payload: {\n        type,\n    }\n})\n\nexport const changeYear = (type) => ({\n    type: CHANGE_YEAR,\n    payload: {\n        type,\n    }\n})\n\nexport const today = (type) => ({\n    type: TODAY,\n})","import React from 'react';\n\nimport './DayTodo.scss';\n\nconst DayTodo = ({title, variables = ''}) => {\n    return (\n        <div className={`day-todo ${variables}`}>{title}</div>\n    )\n}\n\nexport default DayTodo;","import React, {useEffect} from 'react';\n\nimport DayTodo from '../DayTodo/DayTodo';\nimport { setNumWithZero } from '../../helpers/helpers';\n\nimport './Day.scss';\n\nconst Day = (props) => {\n    const { date, id, onClickDateHandler, rightClassName, allDays, selectedDay, month, year } = props;\n\n    useEffect(() => {\n        if(rightClassName === 'date-num date-num-current') {\n            onClickDateHandler(id, setNumWithZero(date), month, year);\n        }\n    }, [])\n\n\n    return (\n        <div \n            className={selectedDay !== null && selectedDay.id === id ? \"date date-selected\" : \"date\"}\n            id={id}\n            onClick={() => onClickDateHandler(id, setNumWithZero(date), month, year)}\n        >\n            <span className={rightClassName}>{date}</span>\n            <div className=\"date-wrap__tasks\">\n                {allDays[id] && allDays[id].tasks.map((task, i) => (\n                    i < 4 && <DayTodo key={i} title={task.title} onClickDateHandler={onClickDateHandler} variables={task.variables} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Day;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { setNumWithZero } from '../../helpers/helpers';\nimport { selectDayAction } from '../../actions/actionCreator';\nimport { changeMonth, changeYear } from '../../actions/actionHeader';\nimport Day from '../Day/Day';\n\nimport './Dates.scss';\n\nconst Dates = (props) => {\n    const { datesArr, arrPrev, arrNext, month, year, selectDay, allDays, selectedDay, changeMonth, changeYear } = props;\n\n    const isCurrentDay = (day) => {\n        let date = new Date();\n        let currentDate = date.getDate();\n        let currentYear = date.getFullYear();\n        let currentMonth = date.getMonth();\n\n        return currentYear === year && currentMonth === month && currentDate === day;\n    }\n\n    const rightClassName = (date, type) => {\n        switch (type) {\n            case 'prev':\n                return \"date-num date-num-prev\";\n            case 'next':\n                return \"date-num date-num-next\";\n            default:\n                return isCurrentDay(date) ? \"date-num date-num-current\" : \"date-num\";\n        }\n    }\n\n    const getDateId = (date, type) => {\n        switch (type) {\n            case 'prev':\n               return `${month === 0 ? year - 1 : year}${month === 0 ? 11 : setNumWithZero(month - 1)}${setNumWithZero(date)}`;\n            case 'next':\n                return `${month === 11 ? year + 1 : year}${month === 11 ? setNumWithZero(0) : setNumWithZero(month + 1)}${setNumWithZero(date)}`;\n            default:\n                return `${year}${setNumWithZero(month)}${setNumWithZero(date)}`;\n        }\n    }\n\n    const onClickDateHandlerCurrent = (id, date, month, year) => {\n        selectDay(id, date, setNumWithZero(month + 1), year);\n    }\n\n    const onClickDateHandlerPrev = (id, date, month, year) => {\n        selectDay(id, date, month === 0 ? 12 : setNumWithZero(month), year);\n        changeMonth(\"\");\n        if(month === 0) changeYear(\"\");\n    }\n\n    const onClickDateHandlerNext = (id, date, month, year) => {\n        selectDay(id, date, month === 11 ? setNumWithZero(1) : setNumWithZero(month + 2), year);\n        changeMonth(\"next\");\n        if(month === 11) changeYear(\"next\");\n    }\n\n    return (\n        <div className=\"dates\">\n            {arrPrev.map(date => (\n                <Day\n                    key={getDateId(date, 'prev')}\n                    date={date}\n                    month={month}\n                    year={year}\n                    id={getDateId(date, 'prev')}\n                    onClickDateHandler={onClickDateHandlerPrev}\n                    rightClassName={rightClassName(date, 'prev')}\n                    allDays={allDays}\n                    selectedDay={selectedDay}\n                />\n            ))}\n            {datesArr.map(date  => (\n                <Day \n                    key={getDateId(date, '')}\n                    date={date}\n                    month={month}\n                    year={year}\n                    id={getDateId(date, '')}\n                    onClickDateHandler={onClickDateHandlerCurrent}\n                    rightClassName={rightClassName(date, '')}\n                    allDays={allDays}\n                    selectedDay={selectedDay}\n                />\n            ))}\n            {arrNext.map(date => (\n                <Day\n                    key={getDateId(date, 'next')}\n                    date={date}\n                    month={month}\n                    year={year}\n                    id={getDateId(date, 'next')}\n                    onClickDateHandler={onClickDateHandlerNext}\n                    rightClassName={rightClassName(date, 'next')}\n                    allDays={allDays}\n                    selectedDay={selectedDay}\n                />\n            ))}\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    const { month, year } = state.date;\n    const { allDays, selectedDay } = state.tasks;\n    return {\n        month,\n        year,\n        allDays,\n        selectedDay,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      selectDay: (id, day, month, year) => dispatch(selectDayAction(id, day, month, year)),\n      changeMonth: type => dispatch(changeMonth(type)),\n      changeYear: type => dispatch(changeYear(type)),\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Dates);","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { \n    getLastElemsNum, \n    getFirstElemsNum, \n    getLastDateOfMonth,\n    addLastElemsNum,\n    addFirstElemsNum,\n    getLastDateOfPrevMonth,\n    range\n} from '../../helpers/helpers';\n\nimport WeekDays from '../../components/WeekDays/WeekDays';\nimport Dates from '../../components/Dates/Dates';\nimport { getAllDaysAction } from '../../actions/actionCreator';\n\nimport './Calendar.scss';\n\nconst maxDays = 42;\n\nfunction Calendar(props) {\n    const { month, year, getAllDays } = props;\n    const [datesArr, setDatesArr] = useState([]);\n    const [arrPrev, setArrPrev] = useState([]);\n    const [arrNext, setArrNext] = useState([]);\n\n    useEffect(() => {\n        let from = 1;\n        let to = getLastDateOfMonth(year, month);\n        let firstElemsNum = getFirstElemsNum(year, month);\n        let lastElemsNum = getLastElemsNum(year, month);\n        let LastDateOfPrevMonth = getLastDateOfPrevMonth(year, month);\n        let dates = range([], from, to);\n        let nexts = addLastElemsNum(lastElemsNum, from, []);\n        let prevs = addFirstElemsNum(firstElemsNum, LastDateOfPrevMonth, []);\n    \n        setDatesArr(dates);\n        setArrPrev(prevs);\n        setArrNext(nexts);\n        \n        let finalArr = prevs.concat(dates, nexts);\n        let differenceArr = finalArr.length - maxDays;\n    \n        if(differenceArr !== 0) {\n            let newArrNext = [...nexts];\n            newArrNext.splice(newArrNext.length - differenceArr);\n            setArrNext(newArrNext);\n        }\n    }, [month, year])\n\n    useEffect(() => {\n        getAllDays();\n    }, [])\n\n    return (\n        <div className=\"calendar\">\n            <WeekDays />\n            <Dates datesArr={datesArr} arrPrev={arrPrev} arrNext={arrNext} />\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    const { month, year } = state.date;\n    return {\n        month,\n        year,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getAllDays: () => dispatch(getAllDaysAction()),\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Calendar);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { getMonthName } from '../../helpers/helpers';\nimport { changeMonth, changeYear, today } from '../../actions/actionHeader';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\n\nimport './Header.scss';\n\nconst Header = (props) => {\n    const {month, year, changeMonth, changeYear, today} = props;\n\n    const onClickHandlerPrev = () => {\n        changeMonth(\"\");\n        if(month === 0) changeYear(\"\");\n    }\n\n    const onClickHandlerNext = () => {\n        changeMonth(\"next\");\n        if(month === 11) changeYear(\"next\");\n    }\n\n    // const onClickHandlerToday = () => {\n    //     let date = new Date();\n    // }\n\n\n    return (\n        <div className=\"header\">\n            <span className=\"header__logo\">КАЛЕНДАРЬ-ОРГАНАЙЗЕР</span>\n            <span className=\"header__info\">\n                <span className=\"header__month-year-wrap\">\n                    <span className=\"header__month\">{getMonthName(month)}</span>\n                    <span className=\"header__year\">{year}</span>\n                </span>\n                <FontAwesomeIcon\n                    className=\"prev-btn\"\n                    onClick={() => onClickHandlerPrev()}\n                    icon={faChevronLeft}\n                />\n                <span\n                className=\"header__today\"\n                onClick={() => today()}\n                >\n                    Сегодня\n                </span>\n                <FontAwesomeIcon\n                    className=\"next-btn\"\n                    onClick={() => onClickHandlerNext()}\n                    icon={faChevronRight}\n                />\n            </span>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    const { month, year } = state.date;\n    return {\n        month,\n        year,\n    };\n  };\n  \nconst mapDispatchToProps = dispatch => {\n    return {\n      changeMonth: type => dispatch(changeMonth(type)),\n      changeYear: type => dispatch(changeYear(type)),\n      today: () => dispatch(today()),\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Header);","import React from 'react';\n// import { Draggable } from 'react-beautiful-dnd';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { faCircle } from '@fortawesome/free-regular-svg-icons';\n\nimport './Todo.scss';\n\nconst Todo = (props) => {\n    const {title, isCompleted, removeTask, id, completeTask, selectedTask} = props;\n\n    return (\n        // <Draggable draggableId={String(id)} index={index}>\n        //     {provided => (\n                <li /*{...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}*/ className=\"todo-item\">\n                    <FontAwesomeIcon \n                        onClick={() => completeTask(id)}\n                        icon={isCompleted ? faCheck : faCircle}\n                        className={isCompleted ? \"mark-complete\" : \"mark\"}\n                    />\n                        <span \n                            onClick={ () => selectedTask(id) }\n                            className={isCompleted ? \"completed text\" : \"text\"}\n                            title={title}\n                        >\n                            {title}\n                        </span>\n                    <FontAwesomeIcon\n                        onClick={() => removeTask(id)}\n                        icon={faTrashAlt}\n                        className=\"delete\"\n                    />\n                </li>\n        //     )}\n        // </Draggable>\n    );\n}\n\nTodo.defaultProps = {\n    title: '',\n    isCompleted: false,\n    removeTask: () => {},\n    completeTask: () => {},\n    id: '',\n}\n  \nexport default Todo;","import React, {useState, useEffect} from 'react';\n// import { CSSTransition, TransitionGroup } from 'react-transition-group';\n// import { Droppable } from \"react-beautiful-dnd\";\nimport { connect } from 'react-redux';\nimport uuid from 'react-uuid';\n\nimport Todo from '../Todo/Todo';\nimport { removeTaskAction, completeTaskAction, selectTaskAction } from '../../actions/actionCreator';\n\nimport './TodoList.scss';\n\nconst TodoList = (props) => {\n    const {removeTask, completeTask, selectedDay, filters, selectedTask} = props;\n\n    const [filteredTasks, setFilteredTasks] = useState([]);\n\n    useEffect(() => {\n        const filterTasks = (tasks, activeFilter) => {\n            switch (activeFilter) {\n                case 'completed':\n                    return tasks.filter(task => task.isCompleted);\n                case 'active':\n                    return tasks.filter(task => !task.isCompleted);\n                default:\n                    return tasks;\n            }\n        }\n    \n        setFilteredTasks(filterTasks(selectedDay.tasks, filters));\n        \n    }, [filters, selectedDay.tasks]);\n\n    return (\n        // <Droppable droppableId={String(uuid())}>\n        //     {provided => (\n                <div className=\"todo-list-wrap\">\n                    <ul /*{...provided.droppableProps} ref={provided.innerRef}*/ className=\"todo-list\">\n                        {/* <TransitionGroup> */}\n                            {filteredTasks.map((taskList) => (\n                                // <CSSTransition\n                                //     key={uuid()}\n                                //     timeout={{enter: 300, exit: 50}}\n                                //     classNames=\"item\"\n                                // > \n                                    <Todo\n                                        completeTask={completeTask}\n                                        removeTask={removeTask}\n                                        id={taskList.id}\n                                        key={uuid()}\n                                        title={taskList.title}\n                                        index={taskList.id}\n                                        selectedTask={selectedTask}\n                                        isCompleted={taskList.isCompleted}\n                                    />\n                                // </CSSTransition>\n                            ))}\n                        {/* </TransitionGroup> */}\n                        {/* {provided.placeholder} */}\n                    </ul>\n                    {/* <TransitionGroup>\n                        <CSSTransition timeout={300} classNames=\"item\"> */}\n                            <span className={filteredTasks.length === 0 ? \"empty\" : \"empty hide\"} > \n                                {filteredTasks.length === 0 && filters === \"completed\" ? \"Нет завершенных задач\" : filteredTasks.length === 0 && \"Нет активных задач\"} \n                            </span>\n                        {/* </CSSTransition>\n                    </TransitionGroup> */}\n                </div>\n        //     )}\n        // </Droppable>\n    );\n}\n\nconst mapStateToProps = state => {\n    const { selectedDay } = state.tasks;\n    const { filters } = state;\n    return {\n        selectedDay,\n        filters,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        removeTask: (id) => dispatch(removeTaskAction(id)),\n        completeTask: (id) => dispatch(completeTaskAction(id)),\n        selectedTask: (id) => dispatch(selectTaskAction(id)),\n    }\n};\n\nTodoList.defaultProps = {\n    tasksList: [],\n    removeTask: () => {},\n    completeTask: () => {},\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);","import React, { useState, useEffect }  from 'react';\nimport { connect } from 'react-redux';\n\nimport { changeFilterAction } from '../../actions/actionCreator';\n\nimport './FilterTodo.scss';\n\nconst FILTERS_BTN = [\n    {\n        text: 'Все',\n        id: 'all',\n    },\n    {\n        text: 'Активные',\n        id: 'active',\n    },\n    {\n        text: 'Завершенные',\n        id: 'completed',\n    },\n];\n\nconst FilterTodo = (props) => {\n    const {selectedDay, filters, changeFilter} = props;\n\n    const [activeCounter, setActiveCounter] = useState(0);\n    const [completedCounter, setCompletedCounter] = useState(0);\n\n    useEffect(() => {\n        const getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length;\n        const getCompletedCounter = tasks => tasks.filter(task => task.isCompleted).length;\n    \n        setActiveCounter(getActiveTasksCounter(selectedDay.tasks));\n        setCompletedCounter(getCompletedCounter(selectedDay.tasks));\n    }, [selectedDay.tasks])\n\n    const checkCounter = (counter, text) => {\n        if (counter === 1) {\n            return `${counter} ${text}ая задача`;\n        } else if (counter >= 2 && counter <= 4) {\n            return `${counter} ${text}ыe задачи`;\n        } else {\n            return `${counter} ${text}ых задач`;\n        }\n    }\n\n    const checkAllCounter = (counter) => {\n        if (counter === 1) {\n            return `${counter} задача`;\n        } else if (counter >= 2 && counter <= 4) {\n            return `${counter} задачи`;\n        } else {\n            return `${counter} задач`;\n        }\n    }\n\n    return (\n        <div className=\"filter-todo\">\n            <span className=\"amount\">\n                {filters === \"completed\" ? checkCounter(completedCounter, \"завершенн\") : filters === \"active\" ? checkCounter(activeCounter, \"активн\") : `Всего ${checkAllCounter(selectedDay.tasks.length)}`} \n            </span>\n            <div className=\"btn-group\">\n                {FILTERS_BTN.map(({text, id}) => (\n                    <button \n                        onClick={() => changeFilter(id)}\n                        key={id}\n                        className={id === filters ? \"filter-btn active\" : \"filter-btn\"}\n                    >\n                        {text}\n                    </button>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nFilterTodo.defaultProps = {\n    amount: 0,\n    text: 'Add todo',\n    changeFilter: () => {},\n}\n\nconst mapStateToProps = state => {\n    const { selectedDay } = state.tasks;\n    const { filters } = state;\n    return {\n        selectedDay,\n        filters,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        changeFilter: activeFilter => dispatch(changeFilterAction(activeFilter)),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterTodo);","import React from 'react';\nimport { connect } from 'react-redux';\n// import { DragDropContext } from 'react-beautiful-dnd';\n\nimport TodoList from '../../components/TodoList/TodoList';\nimport FilterTodo from '../../components/FilterTodo/FilterTodo';\nimport { sortTasksAction, changeIsAddModeAction } from '../../actions/actionCreator';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nimport './Todos.scss';\n\n\nconst Todos = (props) => {\n    const { selectedDay, /*sortTasks,*/ changeIsAdd, isAddMode } = props;\n    \n    // const onDragEnd = ({destination, source, draggableId}) => {\n    //     if(!destination) {\n    //         return;\n    //     }\n        \n    //     sortTasks(\n    //         source.index,\n    //         destination.index,\n    //         draggableId\n    //     );\n    // }\n\n    return (\n        // <DragDropContext /*onDragEnd={onDragEnd}*/>\n            <div className=\"todos\">\n                {selectedDay && (\n                    <>\n                        <div className=\"title\">Задачи на {selectedDay.dayTitle}</div>\n                        {selectedDay.tasks.length === 0 ? (\n                            <>\n                                <span className=\"todos-no-tasks\">В настояще время нет активных задач!</span>\n                                <div className=\"todos__empty-div\"></div>\n                            </>\n                        ) : (\n                            <>\n                                <TodoList />\n                                <FilterTodo />\n                            </>\n                        )}\n                    </>\n                )}\n                <FontAwesomeIcon\n                    className=\"todos-add-btn\"\n                    onClick={() => changeIsAdd(isAddMode)}\n                    icon={faPlus}\n                    title=\"Добавить задачу\"\n                />\n            </div>\n        // </DragDropContext>\n    )\n}\n\nconst mapStateToProps = state => {\n    const { selectedDay, isAddMode } = state.tasks;\n    return {\n        selectedDay,\n        isAddMode\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        sortTasks: (droppableIndexStart, droppableIndexEnd, draggableId) => dispatch(sortTasksAction(droppableIndexStart, droppableIndexEnd, draggableId)),\n        changeIsAdd: (isAddMode) => dispatch(changeIsAddModeAction(isAddMode)),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Todos);\n","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\n\nimport './Form.scss';\n\nconst Form = (props) => {\n    const { changeMode, argument, title, description, setTitle, setDescription, handleClick } = props;\n    \n    return (\n        <div className=\"form-wrap\">\n            <form className=\"form-add\">\n                <label htmlFor=\"title\" className=\"form__name\">Название</label>\n                <input \n                    type=\"text\"\n                    name=\"title\"\n                    id=\"title\"\n                    value={title} \n                    onChange={(e) => setTitle(e.target.value)}\n                    className=\"form__title\"\n                    maxLength=\"40\"\n                    required\n                />\n                <label htmlFor=\"description\" className=\"form__name\">Описание</label>\n                <textarea \n                    name=\"description\"\n                    id=\"description\"\n                    cols=\"30\"\n                    rows=\"5\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    className=\"form__description\"\n                    maxLength=\"200\"\n                />\n            </form>\n            <div className=\"button-wrap\">\n                <FontAwesomeIcon \n                    onClick={() => handleClick()}\n                    icon={faCheck}\n                    className=\"save\"\n                    title=\"Сохранить\"\n                />\n                <FontAwesomeIcon\n                    onClick={() => changeMode(argument)}\n                    icon={faTimes}\n                    className=\"cancel\"\n                    title=\"Отменить\"\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default Form;","import React, { useState } from 'react';\nimport uuid from 'react-uuid';\n\nimport Form from '../Form/Form';\n\nimport './AddMode.scss';\n\nconst AddMode = (props) => {\n    const { changeIsAdd, isAddMode, addTask } = props;\n    const [addTitle, setAddTitle] = useState(\"\");\n    const [addDescription, setAddDescription] = useState(\"\");\n\n    const handleClick = () => {\n        if (addTitle.trim() !== '') {\n            changeIsAdd(isAddMode);\n            addTask(uuid(), addTitle, addDescription, false)\n        }\n    }\n    \n    return (\n        <Form\n            changeMode={changeIsAdd}\n            argument={isAddMode}\n            title={addTitle}\n            description={addDescription}\n            setTitle={setAddTitle}\n            setDescription={setAddDescription}\n            handleClick={handleClick}\n        />\n    )\n}\n\nexport default AddMode;","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport './ReadOnlyTask.scss';\n\nconst ReadOnlyTask = (props) => {\n    const {selectedTask, setEditMode, editMode} = props;\n\n    return (\n        <div className=\"editbox__wrap\">\n            <div className=\"editbox__task-wrap\">\n                <span className=\"editbox__task__name\">Название</span>\n                <span className=\"editbox__task__title\">\n                    {selectedTask.title}\n                </span>\n                <span className=\"editbox__task__name\">Описание</span>\n                { selectedTask.description ? (\n                    <span className=\"editbox__task__description\">\n                        {selectedTask.description}\n                    </span> \n                ) : (\n                    <span className=\"editbox__task__description editbox__task__description-empty \">\n                        Нет описаниея задачи! Добавьте описание нажав на кнопку \"Редактировать\".\n                    </span> \n                )}\n            </div>\n            <FontAwesomeIcon\n                className=\"editbox__edit-btn\"\n                onClick={() => setEditMode(!editMode)}\n                icon={faPencilAlt}\n                title=\"Редактировать\"\n            />\n        </div>\n    )\n}\n\nexport default ReadOnlyTask;","import React, { useState } from 'react';\n\nimport Form from '../Form/Form';\n\nimport './EditModeTask.scss';\n\nconst EditModeTask = (props) => {\n    const { selectedTask, setEditMode, editMode, changeTask } = props;\n    const [title, setTitle] = useState(selectedTask.title);\n    const [description, setDescription] = useState(selectedTask.description);\n\n    const handleClick = () => {\n        if (title.trim() !== '') {\n            setEditMode(!editMode);\n            changeTask(selectedTask.id, title, description);\n        }\n    }\n\n    return (\n        <Form\n            changeMode={setEditMode}\n            argument={!editMode}\n            title={title}\n            description={description}\n            setTitle={setTitle}\n            setDescription={setDescription}\n            handleClick={handleClick}\n        />\n    )\n}\n\nexport default EditModeTask;","import React, { useState } from 'react';\n\nimport ReadOnlyTask from '../../components/ReadOnlyTask/ReadOnlyTask';\nimport EditModeTask from '../../components/EditModeTask/EditModeTask';\n\nimport './SelectedTask.scss';\n\nconst SelectedTask = (props) => {\n    const { changeTask, selectedTask } = props;\n    const [editMode, setEditMode] = useState(false);\n\n    return (\n        <>\n            {!editMode ? (\n                <ReadOnlyTask selectedTask={selectedTask} setEditMode={setEditMode} editMode={editMode} />\n            ) : (\n                <EditModeTask selectedTask={selectedTask} setEditMode={setEditMode} editMode={editMode} changeTask={changeTask} />\n            )}  \n        </>               \n    );\n};\n\nexport default SelectedTask;","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { changeTaskAction, changeIsAddModeAction, addTaskAction } from '../../actions/actionCreator';\nimport AddMode from '../../components/AddMode/AddMode';\nimport SelectedTask from '../../components/SelectedTask/SelectedTask';\n\nimport './Editbox.scss';\n\nconst Editbox = (props) => {\n    const { changeTask, selectedDay, selectedTask, isAddMode, changeIsAdd, addTask } = props;\n\n    return (\n        <div className=\"editbox\">\n            {selectedDay && \n                <div className=\"editbox__task\">\n                    {isAddMode ? (\n                        <AddMode changeIsAdd={changeIsAdd} isAddMode={isAddMode} addTask={addTask} />\n                        ) : (\n                            selectedTask ? (\n                                <SelectedTask changeTask={changeTask} selectedTask={selectedTask} />\n                            ) : (\n                                <div className=\"editbox-no-tasks\">Выберете задачу</div>\n                            )\n                        )\n                    }                   \n                </div>\n            } \n        </div>\n    );\n};\n\nconst mapStateToProps = state => {\n    const { selectedDay, selectedTask, isAddMode } = state.tasks;\n    return {\n        selectedDay,\n        selectedTask,\n        isAddMode,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        changeTask: (id, title, description) => dispatch(changeTaskAction(id, title, description)),\n        changeIsAdd: (isAddMode) => dispatch(changeIsAddModeAction(isAddMode)),\n        addTask: (taskId, title, description, isCompleted) => dispatch(addTaskAction(taskId, title, description, isCompleted)),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Editbox);","  \nimport React from 'react';\n\n// Components\n\n// Style\nimport './Social.scss';\n\nconst Social = ({socialImg, link}) => {\n    return (\n        <a href={link} className=\"social\" target=\"_blank\" rel=\"noopener noreferrer\"> \n           <img src={`img/svg/${socialImg}.svg`} alt=\"\" className=\"social-img\" />\n        </a>\n    );\n}\n\nexport default Social;","  \nimport React from 'react';\n\n// Components\nimport Social from './Social/Social';\n\n// Styles\nimport './Socials.scss';\n\nconst socials = [\n    {socialImg: 'vk', link: 'https://vk.com/ludingennady'},\n    {socialImg: 'github', link: 'https://github.com/GennadjiLudin/react-redux_calendar'},\n];\n\nconst Socials = () => {\n    return (\n        <div className=\"socials\">\n            {socials.map((social, index) => (\n                <Social \n                    {...social}\n                    key={index}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default Socials;","import React from 'react';\n\nimport Socials from '../Socials/Socials';\n\nimport './Footer.scss';\n\nconst Footer = () => {\n\n    return (\n        <div className=\"footer\">\n            <Socials />\n            <div> &copy; Copyright 2019-2020. All Rights Reserved. </div>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\n\nimport './Section.scss';\n\nconst Section = ({ children }) => (\n    <div className=\"organizer-section\">\n        {children}\n    </div>\n)\n\nexport default Section;","import React, {useState} from 'react';\n\nimport Todos from '../../containers/Todos/Todos';\nimport Editbox from '../../containers/Editbox/Editbox';\nimport Footer from '../Footer/Footer';\nimport Section from '../../containers/Sections/Section';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowCircleLeft , faArrowCircleRight } from '@fortawesome/free-solid-svg-icons';\n\nimport './Organizer.scss';\n\nconst Organizer = () => {\n    const [hide, setHide] = useState(false);\n\n    return (\n        <div className={`organizer ${hide ? \"hide\" : \"\"}`}>\n            <Section>\n                <Todos />\n            </Section>\n            <Section>\n                <Editbox />\n            </Section>\n            <Footer />\n            <FontAwesomeIcon\n                className={`organizer-btn ${hide ? \"organizer-btn-show\" : \"\"}`}\n                onClick={() => setHide(!hide)}\n                icon={hide ? faArrowCircleRight : faArrowCircleLeft}\n            />\n        </div>\n    )\n}\n\nexport default Organizer;","import React from 'react';\n\nimport Calendar from './containers/Calendar/Calendar';\nimport Header from './layers/Header/Header';\nimport Organizer from './components/Organizer/Organizer';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"app-wrapper\">\n      <Header />\n      <div className=\"calendar-wrap\">\n        <Organizer />\n        <Calendar />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_MONTH, CHANGE_YEAR, TODAY } from '../actions/actionHeader';\n\nimport { \n    getPrevMonth, \n    getNextMonth, \n} from '../helpers/helpers';\n\nlet DATES = {\n    month: new Date().getMonth(),\n    year: new Date().getFullYear(),\n};\n\nconst date = (state = DATES, action) => {\n    const { type, payload } = action;\n    switch(type) {\n        case CHANGE_MONTH:\n            return {\n                ...state,\n                month: payload.type === \"next\" ? getNextMonth(state.month) : getPrevMonth(state.month),\n            }\n        case CHANGE_YEAR: \n            return {\n                ...state,\n                year: payload.type === \"next\" ? state.year + 1 : state.year - 1,\n            }\n        case TODAY:\n            return {\n                ...state,\n                month: new Date().getMonth(),\n                year: new Date().getFullYear(),\n            }\n        default:\n            return state;\n    }\n}\n\nexport default date;","import { CHANGE_FILTERS } from '../actions/actionCreator';\n\nconst BASE_FILTER = 'all';\n\nconst filters = (state = BASE_FILTER, action) => {\n    const { type, payload } = action;\n    switch (type) {\n        case CHANGE_FILTERS:\n            return payload.activeFilter;\n        default:\n            return state;\n    }\n}\n\nexport default filters;","import { ADD_TASK, GET_ALL_DAYS, REMOVE_TASK, COMPLETE_TASK, CHANGE_TASK, /*DRAG_HAPPENED,*/ SELECT_DAY, SELECT_TASK, CHANGE_ADD_MODE } from '../actions/actionCreator';\n\nconst TASKS = {\n    allDays: {},\n    selectedDay: null,\n    selectedTask: null,\n    isAddMode: false,\n};\n\n\n\nconst tasks = (state = TASKS, action) => {\n    const { type, payload } = action;\n    const setLocalStorage = newAllDays =>  localStorage.setItem(\"allDays\", JSON.stringify(newAllDays));\n    let newAllDaysObj;\n\n    switch(type) {\n        case GET_ALL_DAYS:\n            return {\n                ...state,\n                allDays: payload.allDays ? payload.allDays : state.allDays,\n            }\n        case SELECT_DAY:\n            let newDays = {...state.allDays};\n            if (!newDays[payload.id]) {\n                newDays[payload.id] = {\n                    id: payload.id,\n                    dayTitle: `${payload.day}.${payload.month}.${payload.year}`,\n                    tasks: [],\n                };\n            }\n            return {\n                ...state, \n                allDays: newDays,\n                selectedDay: newDays[payload.id],\n                selectedTask: newDays[payload.id].tasks[0],\n            };\n        case SELECT_TASK:\n            let newSelectTasks = [...state.selectedDay.tasks].find(task => task.id === payload.taskId);\n            return {\n                ...state,\n                selectedTask: newSelectTasks,\n            }\n        case CHANGE_ADD_MODE:\n            return {\n                ...state,\n                isAddMode: !payload.isAddMode,\n            }\n        case ADD_TASK:\n            let newAddTask = {\n                id: payload.taskId,\n                title: payload.title,\n                description: payload.description,\n                isCompleted: payload.isCompleted,\n            }\n\n            let newAddTaskInSelectedDay = {\n                ...state.selectedDay,\n                tasks: [\n                    ...state.selectedDay.tasks,\n                    newAddTask,\n                ]\n            }\n\n            newAllDaysObj =  {\n                ...state.allDays,\n                [state.selectedDay.id]: newAddTaskInSelectedDay,\n            }\n\n            setLocalStorage(newAllDaysObj);\n            return {\n                ...state, \n                selectedTask: newAddTask,\n                selectedDay: newAddTaskInSelectedDay,\n                allDays: newAllDaysObj,\n            };\n        case REMOVE_TASK:\n            let newSelectedDay = {\n                ...state.selectedDay,\n                tasks: state.selectedDay.tasks.filter(task => task.id !== payload.taskId)\n            };\n\n            newAllDaysObj =  {\n                ...state.allDays,\n                [state.selectedDay.id]: newSelectedDay,\n            }\n\n            setLocalStorage(newAllDaysObj);\n            return {\n                ...state,\n                selectedDay: newSelectedDay,\n                allDays: newAllDaysObj,\n                selectedTask: state.selectedTask && (payload.taskId === state.selectedTask.id ? null : state.selectedTask),\n            };\n        case COMPLETE_TASK:\n            let newStateTasks = {\n                ...state.selectedDay,\n                tasks: state.selectedDay.tasks.map(task => {\n                        let newTask = {...task};\n                        if(newTask.id === payload.taskId) {\n                            newTask.isCompleted = !newTask.isCompleted;\n                        }\n                        return newTask;\n                    })\n                };\n\n            newAllDaysObj =  {\n                ...state.allDays,\n                [state.selectedDay.id]: newStateTasks,\n            }\n\n            setLocalStorage(newAllDaysObj);\n            return {\n                ...state,\n                selectedDay: newStateTasks,\n                allDays: newAllDaysObj,\n            };\n        case CHANGE_TASK:\n            let newChangeTask = {\n                ...state.selectedTask,\n                title: payload.title,\n                description: payload.description,\n            }\n\n            let newSelectedDayTasks = {\n                ...state.selectedDay,\n                tasks: state.selectedDay.tasks.map(task => {\n                    let newChangeTaskDay = {...task};\n                    if(newChangeTaskDay.id === payload.taskId) {\n                        newChangeTaskDay = newChangeTask;\n                    }\n                    return newChangeTaskDay;\n                })\n            }\n\n            newAllDaysObj =  {\n                ...state.allDays,\n                [state.selectedDay.id]: newSelectedDayTasks,\n            }\n\n            setLocalStorage(newAllDaysObj);\n            return {\n                ...state,\n                selectedDay: newSelectedDayTasks,\n                allDays: newAllDaysObj,\n                selectedTask: newChangeTask,\n            };\n        // case DRAG_HAPPENED:\n        //         let newState = [...state.selectedDay.tasks];\n        //         const taskReplaced = newState.splice(payload.droppableIndexStart, 1);\n        //         newState.splice(payload.droppableIndexEnd, 0, ...taskReplaced);\n        //     return {\n        //         ...state,\n        //         selectedDay: newState,\n        //         allDays: {\n        //             ...state.allDays,\n        //             [payload.selectedId]: newState,\n        //         },\n        //     };\n        default:\n            return state;\n    }\n}\n\nexport default tasks;","import { combineReducers } from 'redux';\nimport date from './date';\nimport filters from './filters';\nimport tasks from './tasks';\n\nconst rootReducer = combineReducers({\n    date,\n    filters,\n    tasks,\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}